name: Unit test

on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron: "00 00 1 * *"

jobs:
  unit_test:
    runs-on: ubuntu-latest
    name: Unit Test

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python: [3.6, 3.8]

    steps:
      - uses: actions/checkout@v2
      - name: add symlink dir to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --quiet
          pip install -r requirements.txt --quiet
          pip install coverage --quiet

      - name: Test jill download and install
        # make an invalid symlink before installation
        # issue: https://github.com/abelsiqueira/jill/issues/25
        run: |
          mkdir ~/.local/bin -p && ln -sf /abcde ~/.local/bin/julia
          make test

      - name: Test jill upstream
        run: |
          coverage run -a -m jill upstream

      - name: Test jill update
        run: |
          coverage run -a -m jill update
          coverage run -a -m jill update --upstream Official

      - name: generate covrage report
        run: |
          coverage report
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml

  musl_job:
    name: Unit Test for musl
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sys: [linux-musl]
        python: [3.6]
    steps:
      - uses: actions/checkout@v2
      - name: add symlink dir to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --quiet
          pip install -r requirements.txt --quiet
          pip install coverage --quiet

      - name: Test jill download and install
        # make an invalid symlink before installation
        # issue: https://github.com/abelsiqueira/jill/issues/25
        run: |
          mkdir ~/.local/bin -p && ln -sf /abcde ~/.local/bin/julia
          python -m jill download --sys musl --upstream Official
          python -m jill install --upstream Official --confirm
          julia -e 'using InteractiveUtils; versioninfo()'
          python -m jill install 1 --upstream Official --confirm
          julia -e 'using InteractiveUtils; versioninfo()'
          julia-1 -e 'using InteractiveUtils; versioninfo()'
          python -m jill install 1.5 --upstream Official --confirm
          julia -e 'using InteractiveUtils; versioninfo()'
          julia-1.5 -e 'using InteractiveUtils; versioninfo'

  windows_job:
    name: Unit Test
    runs-on: windows-latest
    strategy:
      matrix:
        os: [windows-latest]
    steps:
      - uses: actions/checkout@v2
      - name: add symlink dir to PATH
        shell: bash
        run: echo "C:\Users\runneradmin\AppData\Local\julias\bin" >> $GITHUB_PATH
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --quiet
          pip install -r requirements.txt --quiet
          pip install coverage --quiet

      - name: test install
        run: |
          python -m jill upstream
          python -m jill install --confirm --upstream Official
          & julia -e 'using InteractiveUtils; versioninfo()'
          & julia --project=. -e 'using Pkg; Pkg.add(\"ImageCore\")'
      - name: test symlink
        run: |
          python -m jill install 1.0 --confirm --upstream Official
          & julia -e 'using InteractiveUtils; versioninfo()'
          & julia-1.0 -e 'using InteractiveUtils; versioninfo()'
      - name: test nightly
        run: |
          python -m jill install latest --confirm --upstream Official
          & julia -e 'using InteractiveUtils; versioninfo()'
          & julia-1.0 -e 'using InteractiveUtils; versioninfo()'
          & julia-latest -e 'using InteractiveUtils; versioninfo()'
      - name: test path with spaces and trailing slashes
        run: |
          mkdir "test temp"
          & python -m jill install latest --confirm --upstream Official --install_dir "test temp"
          & julia -e 'using InteractiveUtils; versioninfo()'
          & julia-1.0 -e 'using InteractiveUtils; versioninfo()'
          & julia-latest -e 'using InteractiveUtils; versioninfo()'

  arm_job:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        architecture: [aarch64, armv7]

    name: Unit Test
    steps:
      - uses: actions/checkout@v2.0.0

      # it's running in docker container, so we need to squash all codes into one step
      - name: Test jill install
        uses: uraimo/run-on-arch-action@v1.0.5
        with:
          architecture: ${{ matrix.architecture }}
          distribution: ubuntu18.04
          # no --update because not arm is tier 2 support in Julia
          run: |
            apt-get update -qq
            apt-get install -y -qq -o=Dpkg::Use-Pty=0 python3-pip python3-wheel python3-setuptools gnupg wget --no-install-recommends
            export DEBUG=True
            pip3 install --upgrade pip --quiet
            pip3 install -r requirements.txt --quiet
            python3 -m jill upstream
            python3 -m jill install --confirm --upstream Official
            julia -e 'using InteractiveUtils; versioninfo()'
            python3 -m jill install 1.0 --confirm --upstream Official
            julia -e 'using InteractiveUtils; versioninfo()'
            julia-1 -e 'using InteractiveUtils; versioninfo()'
            julia-1.0 -e 'using InteractiveUtils; versioninfo()'
